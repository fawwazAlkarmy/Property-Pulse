generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PropertyType {
  APARTMENT
  CONDO
  CHALET
  HOUSE
}

model Location {
  id         String     @id @default(uuid())
  street     String
  city       String
  state      String
  zipcode    String
  propertyId String
  properties Property[]
}

model Rate {
  id         String     @id @default(uuid())
  nightly    Int?
  weekly     Int?
  monthly    Int?
  properties Property[]
}

model Seller {
  id         String     @id @default(uuid())
  name       String
  email      String     @unique
  phone      String     @unique
  properties Property[]
}

model Property {
  id          String       @id @default(uuid())
  ownerId     String
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name        String       @unique
  type        PropertyType
  description String?      @db.Text
  beds        Int
  baths       Int
  sqft        Int
  amenities   String[]
  rateId      String
  rates       Rate         @relation(fields: [rateId], references: [id], onUpdate: Cascade)
  sellerId    String
  seller      Seller       @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  images      String[]
  isFeatured  Boolean      @default(false)
  locationId  String
  location    Location     @relation(fields: [locationId], references: [id], onUpdate: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  bookmarks   Bookmark[]
}

model Bookmark {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model User {
  id         String     @id @default(uuid())
  clerkId    String
  username   String     @unique
  email      String     @unique
  avatar     String?
  properties Property[]
  bookmarks  Bookmark[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}
